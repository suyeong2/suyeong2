head(population)
pop <-read.table("F:/work/2019/강의/시계열자료분석/timedata/population.txt")
pop2 <-as.vector(t(population))/10000
x <- 1960:1995
plot(x, pop2,type = "l")

library(ggplot2)
df<-data.frame(x,pop2)
model1<-lm(pop2~x, data=df)
summary(model1)
lines(x,model1$fitted.values,col="red",lwd=2,lty=2)

model2<-lm(pop2~x+I(x^2),data=df)
lines(x, model2$fitted.values,col="blue",lwd=2,lty=2)

predict(model2,data.frame(x=2000),interval="confidence")



library(forecast)
y <- ts(pop2, start=1960)
plot(y)
autoplot(y)+geom_smooth(method = "lm")

out2<-tslm(y~trend+I(trend^2))
fcast<-forecast(out2,h=20)
autoplot(fcst)+
  ggtitle("회귀를 이용한 예측값") +  xlab("연도")
  
out2<-tslm(y~trend)
out6<-tslm(log(y)~trend+I(trend^2))
summary(out6)#1960년을 1로 간주해서 분석한 결과임

autoplot(fcast)#1차
autoplot(fcast1, col="red")#2차?

# 예측은
fcast<-forecast(out6, h=5)

autoplot(fcast) +
  ggtitle("회귀를 이용한 예측값") +  xlab("연도")
  


a1=-0.8
a2=1.4

i<-1:100
first = a1*sin(pi*i/6 + pi/8)
second = a2*sin(pi*i/3+pi*3/4)
z=first+second

plot(1:100, z, type="o", lwd=2)

library(forecast)
z2 <- ts(z, frequency = 12)  #계절성분이 12인 seasonal time series data로 변환
#frequency=1이면 1년으로 나옴

fit1<-tslm(z2~season)
autoplot(z2)


fore1<-forecast(fit1,h=12)
autoplot(fore1)


x<-rep(1:12,10)[1:100]
year<-rep(2006:2018,each=12)[1:100]
df<-data.frame(x,z)
head(df)
out1<-lm(z~factor(x),data=df) #factor로 잡아주고 해야함
summary(out1)

df<-data.frame(x,z,year)
head(df)
out1<-lm(z~factor(x)+year,data=df)
summary(out1)


time<-1:100
SIN<-COS <- matrix(nr=length(time), nc=6)

for(i in 1:6){
  COS[,i] <- cos(2*pi*i*time/12)
  SIN[,i] <- sin(2*pi*i*time/12)
}
head(COS)
head(SIN)



library(fpp3)
us_change 

us_change %>% 
  pivot_longer(
    cols = c("Consumption", "Income"),
    names_to = "Series",
    values_to = "value"
  ) -> us_change2

us_change2

us_change2 %>% 
 + autoplot(value) + labs(y="% change")

us_change %>% 
  ggplot(aes(x = Income, y = Consumption)) +
  geom_point(size = 1.2) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE) + # method = "lm"은 linear regerssion을 의미합니다.
  labs(
    x = "Income (quarterly % change)",
    y = "Consumption (quaterly % change)"
  )

fit_consMR <- us_change %>% 
  model(tslm = TSLM(formula = Consumption ~ Income + Production + Unemployment + Savings))
fit_consMR %>% 
  report()

fit_consMR %>% 
  augment()


##이제 중요
recent_production <- aus_production %>% 
  filter(year(Quarter) >= 1992)

recent_production %>% 
  autoplot(Beer) +
  labs(y = "Megalitres", title = "Australian quarterly beer production")

# trend() 함수와 season() 함수는 디폴트로 들어가는 표준함수가 아닙니다. 필요 시 TSLM() 함수 안에서 적용합니다.
fit_beer <- recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + season()))

fit_beer %>% 
  report()



recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + fourier(K = 2)))->model1

recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + season()))->model2

recent_production %>% 
  model(TSLM(formula = Beer ~ trend()))->model22

recent_production %>% 
  model(TSLM(formula = Beer ~ season()))->model23

model1 %>% 
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)
model2 %>% 
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)
model22 %>% ##안좋음
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)
model23 %>% ##model22보다 좋다?
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)

##예측
forecast(model1) %>% 
  autoplot(recent_production) +
  labs(y = "megalitres", title = "Forecasts of beer production using regression")
forecast(model2) %>% 
  autoplot(recent_production) +
  labs(y = "megalitres", title = "Forecasts of beer production using regression")
forecast(model23) %>%  ##추세성 없음 정확도 떨어짐
  autoplot(recent_production) +
  labs(y = "megalitres", title = "Forecasts of beer production using regression")


##Nonlinear regression
library(fpp3)
boston_men <- boston_marathon %>% 
  filter(Year >= 1924 & Event == "Men's open division") %>% 
  mutate(Minutes = as.numeric(Time)/60)

boston_men

boston_men %>% autoplot()

boston_men %>% 
  autoplot(Minutes) +
  geom_smooth(se = FALSE, method = "lm") +
  labs(x = "Year", y = "Minutes")



fit_trends <- boston_men %>% 
  model(
    linear = TSLM(formula = Minutes ~ trend()), #일차
    exponential = TSLM(formula = log(Minutes) ~ trend()),##리미트만? 로그변환?
    piecewise = TSLM(formula = Minutes ~ trend(knots = c(1950, 1980)))##매듭?
  )

fc_trends <- fit_trends %>% 
  forecast(h = 10)

boston_men %>% 
  autoplot(Minutes) +
  geom_line(data = fit_trends %>% fitted(), aes(y = .fitted, colour = .model)) +
  autolayer(fc_trends, alpha = 0.5, level = 95) +
  labs(y = "Minutes", title = "Boston marathon winning times")




-------------------------------------------------------------------
##지수함수
iexp<-function(x) return(1/exp)
plot(exp,0, 5)
##지수함수를 역수로 바꾸면
iexp<-function(x) return(1/exp)
x<-seq(0,5,0.1)
y<-1/exp(x)
plot(x,y,type = "l")
------------------------------------------------------------------
##지수평활법
library(fpp2)
oildata <- window(oil, start=1996)
autoplot(oildata) +
  ylab("원유 (백만 톤)") + xlab("연도")

oildata %>% meanf(h=5) %>% autoplot ##meanf는전체평균으로 예픅

oildata %>% ses(h=5) %>% autoplot ##ses단점 추세반영되어있지 않음


library(forecast)
y<-ts(airquality$Ozone)
autoplot(y)
y %>% 
  meanf() %>% autoplot()  ##meanf는 평균

##지수평활로 예측
y %>% 
  ses() %>% autoplot()  ##얼마시점 이후에는 영향을 주지 않음

y %>% 
  holt() %>% autoplot() ##평균값만 보는게 아니라 기울기도, 기울기 추세성 있는지 없느지 본다

y %>% 
  holt(damped = T) %>% autoplot()##damped = T 추세감쇠?


y %>% holt()->fit2
fit2$model
##최근데이터에 더 많은 가중치를 줌

##Smoothing parameters:
  ##alpha = 0.4874 알파가 거의 0인건
##베타값이 변화 없다?

##pie는 감쇠정도(평균으로 돌아갈수 있는게 어느정도가 되는가)


##홀트-윈터스의 계절성 기법
library(fpp2)

aust <- window(austourists,start=2005)
autoplot(aust)

##가법모형 "additive"
##obs=level+slope+season
##계절 변동이 일정하면 가법
fit1 <- hw(aust,seasonal="additive")
fit1$model
hw(aust,seasonal="additive", damped = T)##damped = T넣으면.....
#s = 1.3106 -1.6935 -9.3132 9.6962 1:4분기로 되어있어 4개
##gamma = 0.4263  0.4정도의 가중치
plot(fit1$model)

##승법모형 "multiplicative"
##obs=level*slope*season
##계절성의 변동이 계속 커질때 사용?
##게절성이 변동이 있을때 승법
fit2 <- hw(aust,seasonal="multiplicative")
plot(fit2$model)

## PI=FALSE없이 그리면 신뢰구간 표현
autoplot(aust) +
  autolayer(fit1, series="HW 덧셈 예측", PI=FALSE) +
  autolayer(fit2, series="HW 곱셈 예측",
            PI=FALSE) +
  xlab("연도") +
  ylab("호주 국제선 여행객 숙박일 (단위: 백만)") +
  guides(colour=guide_legend(title="예측"))


##해보기ㅣ
beer
autoplot(beer)
 
tslm(beer~trend+season)->fit0
summary(fit0)
forecast(fit0,h=12) %>% autoplot()
##tslm(beer~trend+fourier(beer,k=6............))
hw(beer,h=12) %>% autoplot()
hw(beer,h=12,seasonal="additive")->fit11
hw(beer,h=12,seasonal="multiplicative")->fit22

autoplot(beer)+
  autolayer(forecast(fit0,h=12),series="추세모형",PI=FALSE)+
  autolayer(fit11,series = "HW 덧셈",PI=FALSE)+
  autolayer(fit22,series="HW 곱셈",PI=FALSE)

##3개의 모형중 잘 맞는게 뭔지 알려면
##일부만 활용해서?..........



##평활법2
library(fpp2)
aust <- window(austourists, start=2005)
fit <- ets(aust)
outfit<-forecast(fit,h=12)
autoplot(fit)
autoplot(outfit)


##ZNN을 넣으면 ses랑 결과가 같음
fit <- ets(aust,model = "ZNN")  ##model("ZZZ"/"ZAA")
outfit<-forecast(fit,h=12)
autoplot(fit)
autoplot(outfit)

##추세감쇠(damped = NULL맞는지 모르겠음)
fit <- ets(aust,model = "ZNN",damped = NULL)
outfit<-forecast(fit,h=12)
autoplot(fit)
autoplot(outfit)

#가법으로 그려짐(hw)
fit1<-hw(aust,h=12)
autoplot(fit1)
autoplot(fit1,PI=FALSE,col="blue")+
  autolayer(outfit,col="red",PI=FALSE)



##평활법2
library(fpp2)
aust <- window(austourists, start=2005)
fit <- ets(aust)
outfit<-forecast(fit,h=12)
autoplot(fit)
autoplot(outfit)


##ZNN을 넣으면 ses랑 결과가 같음
fit <- ets(aust,model = "ZNN")  ##model("ZZZ"/"ZAA")
outfit<-forecast(fit,h=12)
autoplot(fit)
autoplot(outfit)

##추세감쇠(damped = NULL맞는지 모르겠음)
fit <- ets(aust,model = "ZNN",damped = NULL)
outfit<-forecast(fit,h=12)
autoplot(fit)
autoplot(outfit)

#가법으로 그려짐(hw)
fit1<-hw(aust,h=12)
autoplot(fit1)
autoplot(fit1,PI=FALSE,col="blue")+
  autolayer(outfit,col="red",PI=FALSE)



##분해법
aust %>% autoplot
decompose(aust) %>% plot ##decompose뭐다..?
decompose(aust)->out1

##4개로 뭉개서 계절성 없애ㅐ기?
ma(aust,4)
out1$trend

aust-ma(aust,4) ##계절성분+오차뭐시기

out1$seasonal ###과거부터 현재까지 변화없음
out1$trend ##평균값이 나옴(이동평균)
aust-out1$trend->temp1
temp1
temp1[seq(1,44,by=4)] %>% mean(., na.rm=T)
temp1[seq(2,44,by=4)] %>% mean(., na.rm=T)
temp1[seq(3,44,by=4)] %>% mean(., na.rm=T)
temp1[seq(4,44,by=4)] %>% mean(., na.rm=T)
out1$seasonal[1:4]

##4개로 뭉개서 계절성 없애ㅐ기?
ma(aust,4)
out1$trend






